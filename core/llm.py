from core.settings import openai_key, model_api_url
from core.logging_config import setup_logger
from lexicon.prompts import prompt_openai_simple_ru

import httpx

from langchain.prompts import PromptTemplate
from langchain_community.chat_models import ChatOpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ChatGPT
# model_name = "gpt-3.5-turbo"
model_name = "claude-3-haiku-20240307"
# model_name = "gpt-4o-mini"

llm = ChatOpenAI(
    openai_api_key=openai_key,
    base_url=model_api_url, model_name=model_name,
    max_tokens=4096,
    # temperature=0.7 # gpt-3.5-turbo
    temperature=0.7 # claude-3-haiku-20240307
    # temperature=0.8 # gpt-4o-mini
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
prompt = PromptTemplate.from_template(prompt_openai_simple_ru)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
async def generate_advertisement(product: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        formatted_prompt = prompt.format(product=product)
        logger.info(f"–°–æ–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {formatted_prompt}")

        # –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å
        response = await llm.ainvoke(formatted_prompt)

        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É API, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
        if isinstance(response, dict) and 'error' in response:
            error_message = response['error'].get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
            logger.error(f"–û—à–∏–±–∫–∞ API: {error_message}")
            return "–û–π, –Ω–µ –º–æ–≥—É –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –ê–≤–∏—Ç–æ.\n–ü–æ-–º–æ–µ–º—É —è —Å–ª–æ–º–∞–ª—Å—è üò±\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç error (–Ω–∞–ø—Ä–∏–º–µ—Ä, AIMessage), —ç—Ç–æ —Ç–∞–∫–∂–µ –æ—à–∏–±–∫–∞
        if hasattr(response, 'error'):
            error_message = response.error.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
            logger.error(f"–û—à–∏–±–∫–∞ API: {error_message}")
            return "–û–π, –Ω–µ –º–æ–≥—É –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –ê–≤–∏—Ç–æ.\n–ü–æ-–º–æ–µ–º—É —è —Å–ª–æ–º–∞–ª—Å—è üò±\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ AIMessage
        generated_text = response.content
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {generated_text}")

        return generated_text

    except httpx.HTTPStatusError as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ HTTP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400, 500)
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e.response.status_code} - {e.response.text}")
        return "–û–π, –Ω–µ –º–æ–≥—É –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –ê–≤–∏—Ç–æ.\n–ü–æ-–º–æ–µ–º—É —è —Å–ª–æ–º–∞–ª—Å—è üò±\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "–û–π, –Ω–µ –º–æ–≥—É –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –ê–≤–∏—Ç–æ.\n–ü–æ-–º–æ–µ–º—É —è —Å–ª–æ–º–∞–ª—Å—è üò±\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."