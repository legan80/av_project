from core.bot_instance import bot
from core.settings import channel_username
from core.llm import generate_advertisement
from core.logging_config import setup_logger

from core.keyboards.menu import set_main_menu
from core.subscribe_check import is_subscribed
from core.parser import is_valid_avito_url, parse_avito
from core.channel import publish_to_channel
from core.database import create_pool, save_user, save_request
from lexicon.lexicon_ru import start_text_ru, help_text_ru, wrong_link_text_ru

import re
from aiogram import Dispatcher, types
from aiogram.methods import DeleteMessage
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É–ª–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
pool = None

# –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Menu
@dp.startup()
async def main():
    await set_main_menu(bot)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_command(message: Message):
    user_id = message.from_user.id
    name = message.from_user.full_name
    username = message.from_user.username

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with pool.acquire() as conn:
        await save_user(conn, user_id=user_id, name=name, username=username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if await is_subscribed(user_id, pool):
        await message.answer(
            text=start_text_ru)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            url="https://t.me/avito_prodano"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
        ))
        builder.add(types.InlineKeyboardButton(
            text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="check_subscription"
        ))

        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.",
            reply_markup=builder.as_markup()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@dp.callback_query(lambda callback: callback.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if await is_subscribed(user_id, pool):
        await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    else:
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(
        text=help_text_ru,
        parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏
    )

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ Avito
AVITO_URL_PATTERN = re.compile(r'https://(www\.|m\.)?avito\.ru/[^/]+/[^/]+/.+')

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
@dp.message(lambda message: AVITO_URL_PATTERN.search(message.text))
async def handle_avito_link(message: Message):
    user_id = message.from_user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ channel_username
    logger.info(f"channel_username: {channel_username}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
    if not await is_subscribed(user_id, pool):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            url=f"https://t.me/{channel_username}"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
        ))
        builder.add(types.InlineKeyboardButton(
            text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
            callback_data="check_subscription"
        ))

        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.",
            reply_markup=builder.as_markup()
        )
        return

    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    match = AVITO_URL_PATTERN.search(message.text)
    if not match:
        await message.answer(text=wrong_link_text_ru)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É
    url = match.group(0)
    logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    if not is_valid_avito_url(url):
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}")
        await message.answer(text=wrong_link_text_ru)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_message = await message.answer("–°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    result, category = await parse_avito(url)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {result}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç
    advertisement = await generate_advertisement(result)
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {advertisement}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with pool.acquire() as conn:
        await save_request(
            conn,
            user_id=user_id,
            message_text=url,
            parsed_title=result,
            parsed_category=category,
            generated_text=advertisement
        )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot(DeleteMessage(chat_id=message.chat.id, message_id=processing_message.message_id))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_message = (
        f"<b>{result}</b>\n"
        f"{advertisement}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å—Å—ã–ª–∫—É
    await message.reply(final_message, parse_mode="HTML")

    # –ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = await publish_to_channel(bot, url, result, advertisement)

    # –ï—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    if message_id:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        channel_link = f"https://t.me/{channel_username}/{message_id}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        await message.answer(
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            f"<b><a href='{channel_link}'>üîó –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a></b> –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ @avito_prodano.\nüéâ –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é!\n\n",
            parse_mode="HTML"
        )

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
@dp.message(lambda message: message.text.startswith(('http')))
async def wrong_avito_link(message: Message):
    await message.answer(text=wrong_link_text_ru)
    return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global pool
    # –°–æ–∑–¥–∞—ë–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pool = await create_pool()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())